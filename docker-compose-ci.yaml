version: '3.9'
services:
  front:
    image: sermalenk/skypro-front:lesson-37
    ports:
      - 80:80
    depends_on:
      - api
    networks:
      - backend

  api:
    image: ivinokurov/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    env_file:
      - .docker_env
    environment:
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./.docker_env:/code/.docker_env
    networks:
      - backend


  migrations:
    image: ivinokurov/todolist:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    env_file:
      - .docker_env
    environment:
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: python manage.py migrate
    volumes:
      - ./.docker_env:/code/.docker_env
    networks:
      - backend


  postgres:
    image: postgres:12.4-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend


volumes:
  db:
  .docker_env:

networks:
  backend:
    driver: bridge